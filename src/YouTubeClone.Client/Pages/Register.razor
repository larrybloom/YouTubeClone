@page "/register"
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Register - YouTube Clone</PageTitle>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6 col-lg-4">
            <div class="card">
                <div class="card-header">
                    <h3 class="text-center">Create Account</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="registerRequest" OnValidSubmit="HandleRegistration">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">
                                @errorMessage
                            </div>
                        }

                        <div class="mb-3">
                            <label for="userName" class="form-label">Username</label>
                            <InputText id="userName" class="form-control" @bind-Value="registerRequest.UserName" placeholder="Choose a username" />
                            <ValidationMessage For="@(() => registerRequest.UserName)" />
                        </div>

                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <InputText id="email" class="form-control" @bind-Value="registerRequest.Email" placeholder="Enter your email" />
                            <ValidationMessage For="@(() => registerRequest.Email)" />
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="firstName" class="form-label">First Name</label>
                                <InputText id="firstName" class="form-control" @bind-Value="registerRequest.FirstName" placeholder="First name" />
                                <ValidationMessage For="@(() => registerRequest.FirstName)" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="lastName" class="form-label">Last Name</label>
                                <InputText id="lastName" class="form-control" @bind-Value="registerRequest.LastName" placeholder="Last name" />
                                <ValidationMessage For="@(() => registerRequest.LastName)" />
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <InputText id="password" type="password" class="form-control" @bind-Value="registerRequest.Password" placeholder="Choose a password" />
                            <ValidationMessage For="@(() => registerRequest.Password)" />
                            <small class="form-text text-muted">
                                Password must be at least 6 characters long and contain uppercase, lowercase, and numbers.
                            </small>
                        </div>

                        <div class="mb-3">
                            <label for="confirmPassword" class="form-label">Confirm Password</label>
                            <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="registerRequest.ConfirmPassword" placeholder="Confirm your password" />
                            <ValidationMessage For="@(() => registerRequest.ConfirmPassword)" />
                        </div>

                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                }
                                Register
                            </button>
                        </div>
                    </EditForm>

                    <hr />

                    <div class="text-center">
                        <p>Already have an account? <a href="/login">Login here</a></p>
                    </div>

                    <div class="d-grid gap-2">
                        <button class="btn btn-outline-danger" @onclick="RegisterWithGoogle" disabled="@isLoading">
                            <i class="bi bi-google"></i> Register with Google
                        </button>
                        <button class="btn btn-outline-primary" @onclick="RegisterWithMicrosoft" disabled="@isLoading">
                            <i class="bi bi-microsoft"></i> Register with Microsoft
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterRequest registerRequest = new();
    private string errorMessage = "";
    private bool isLoading = false;

    private async Task HandleRegistration()
    {
        isLoading = true;
        errorMessage = "";

        try
        {
            var result = await AuthService.RegisterAsync(registerRequest);
            
            if (result.IsSuccess)
            {
                var authStateProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;
                await authStateProvider.MarkUserAsAuthenticated();
                NavigationManager.NavigateTo("/", true);
            }
            else
            {
                errorMessage = result.ErrorMessage ?? "Registration failed";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RegisterWithGoogle()
    {
        // Implement Google OAuth registration
        errorMessage = "Google registration not implemented yet";
    }

    private async Task RegisterWithMicrosoft()
    {
        // Implement Microsoft OAuth registration
        errorMessage = "Microsoft registration not implemented yet";
    }
}
