@page "/"
@inject IVideoService VideoService
@inject NavigationManager NavigationManager

<PageTitle>YouTube Clone</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1>Welcome to YouTube Clone</h1>
            
            <div class="search-section mb-4">
                <div class="input-group">
                    <input type="text" class="form-control" placeholder="Search videos..." @bind="searchQuery" @onkeypress="OnSearchKeyPress" />
                    <button class="btn btn-primary" @onclick="SearchVideos">
                        <i class="bi bi-search"></i> Search
                    </button>
                </div>
            </div>

            @if (isLoading)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (videos.Any())
            {
                <div class="row">
                    @foreach (var video in videos)
                    {
                        <div class="col-lg-3 col-md-4 col-sm-6 mb-4">
                            <div class="card h-100">
                                <img src="@video.ThumbnailUrl" class="card-img-top" alt="@video.Title" style="height: 200px; object-fit: cover;" />
                                <div class="card-body d-flex flex-column">
                                    <h6 class="card-title">@video.Title</h6>
                                    <p class="card-text text-muted small">@video.ChannelTitle</p>
                                    <p class="card-text text-muted small">
                                        @video.ViewCount.ToString("N0") views • @video.PublishedAt.ToString("MMM dd, yyyy")
                                    </p>
                                    <div class="mt-auto">
                                        <button class="btn btn-sm btn-outline-primary me-2" @onclick="() => LikeVideo(video.Id)">
                                            <i class="bi bi-hand-thumbs-up"></i> @video.LikeCount.ToString("N0")
                                        </button>
                                        <button class="btn btn-sm btn-outline-secondary" @onclick="() => ViewVideo(video.Id)">
                                            <i class="bi bi-play"></i> Watch
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else if (!string.IsNullOrEmpty(searchQuery))
            {
                <div class="alert alert-info">
                    No videos found for "@searchQuery". Try a different search term.
                </div>
            }
            else
            {
                <div class="alert alert-info">
                    Enter a search term to find videos.
                </div>
            }
        </div>
    </div>
</div>

@code {
    private string searchQuery = "";
    private List<YouTubeVideoDto> videos = new();
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadTrendingVideos();
    }

    private async Task LoadTrendingVideos()
    {
        isLoading = true;
        try
        {
            var request = new YouTubeTrendingRequest
            {
                MaxResults = 20,
                RegionCode = "US"
            };
            videos = await VideoService.GetTrendingVideosAsync(request);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading trending videos: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SearchVideos()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
            return;

        isLoading = true;
        try
        {
            var request = new YouTubeSearchRequest
            {
                Query = searchQuery,
                MaxResults = 20,
                Type = "video"
            };
            var response = await VideoService.SearchVideosAsync(request);
            videos = response.Videos;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error searching videos: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OnSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchVideos();
        }
    }

    private async Task LikeVideo(string videoId)
    {
        try
        {
            await VideoService.ToggleVideoLikeAsync(videoId, true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error liking video: {ex.Message}");
        }
    }

    private void ViewVideo(string videoId)
    {
        NavigationManager.NavigateTo($"/watch/{videoId}");
    }
}
